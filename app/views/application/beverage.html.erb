<%#= link_to "clear bubbles", "/clearbev", :method => :post %>
<%= button_to "Clear Bubbles", clearbev_path, :class => "clearbev", :remote => true, :method => :delete %>
<%= button_to "Refresh Bubbles", beverage_path, :method => :get %>

<script src="http://d3js.org/d3.v3.min.js"></script>
<style>

text {
  font: 10px sans-serif;
}

</style>
<script>

$('.clearbev').click(function(e){
  e.preventDefault();
  $.ajax({
    url: '/clearbev',
    type: 'DELETE',
    success: function(result) {
      location.reload();
    }
  })
  return location.reload();
});

var testjson = <%= @jsonbevs %>

// begin d3 

var diameter = 960,
    format = d3.format(",d"),
    color = d3.scale.category10();

var bubble = d3.layout.pack()
    .sort(null)
    .size([diameter, diameter])
    .padding(1.5);

var svg = d3.select("body").append("svg")
    .attr("width", diameter)
    .attr("height", diameter)
    .attr("class", "bubble");

var nodeKey = function (d) {
  return d.id;
}

d3.json("", function(error, root) {
  var node = svg.selectAll(".node")
      .data(bubble.nodes(classes(testjson), bubble.nodeKey)
      .filter(function(d) { return !d.children; }))
    .enter().append("g")
      .attr("id", function(d) {return d.className})
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

  node.append("title")
      .text(function(d) { return d.className + ": " + format(d.value); });

  node.append("circle")
      .attr("id", function(d) {return d.className})
      .attr("r", function(d) { return d.r; })
      .style("fill", function(d) { return color(d.className); });

  node.append("text")
      .attr("dy", ".3em")
      .style("text-anchor", "middle")
      .text(function(d) { return d.className.substring(0, d.r / 3); });

  node.transition()
      .attr("r", 100);
      
});

// function transitionNodes() {
//   var child = svg.selectAll(".node")
//     child.transition()
//     .attr("r", 100);
//   console.log(child);
// }

// Returns a flattened hierarchy containing all leaf nodes under the root.
function classes(root) {
  var classes = [];

  function recurse(name, node) {
    if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
    else classes.push({packageName: name, className: node.name, value: node.size});
  }

  recurse(null, root);
  return {children: classes};
}

d3.select(self.frameElement).style("height", diameter + "px");

// end d3

// begin get tweets

setTimeout(getNewTweets,1000);
var after = 1;
  
function getNewTweets(){
    d3.json("beverage.json?after=", function(error, root) {
      console.log(root);
      var total = 0;
      root["children"].forEach(function(child) {  total = total + child.size });
      console.log("Total is "+ total);
      root["children"].map( function(item) {
        // console.log(item['name'],item['size']);
        // $('g#' + item['name']).attr('transform', function(d) { return "translate(" + d.x + "," + d.y + ")"; });
        // $('circle#' + item['name']).attr('r', item["size"]);
        // transitionNodes();
        // console.log("Percentage for " + item['name'] +" is " + (((item["size"])/total)*100).toFixed(2) + "%");
        $('circle#' + item['name']).attr('r', function(d) { return d.r } );
        console.log((item["size"])/total);
        console.log()
      })
    });
  setTimeout(getNewTweets,1000);  
}

function clearBubbles(){
  $.post("clearbev");
}

</script>

